{"version":3,"sources":["components/PostsList/PostsList.jsx","api/api.js","components/NewCommentForm/NewCommentForm.jsx","api/comments.js","components/Loader/Loader.jsx","components/PostDetails/PostDetails.jsx","api/posts.js","App.jsx","api/users.js","index.js"],"names":["PostsList","posts","onSelect","selectedPostId","className","map","post","key","id","userId","title","type","onClick","BASE_URL","request","url","fetch","then","response","json","result","data","catch","Error","uuid","require","NewCommentForm","postId","addCommentLocal","useState","name","setName","email","setEmail","body","setBody","addComment","event","a","preventDefault","prepearedComment","comment","method","headers","JSON","stringify","onSubmit","placeholder","value","onChange","target","required","Loader","PostDetails","setPost","comments","setComments","showComment","setShowComment","loading","setLoading","useEffect","getOnePost","getComments","deleteSelectedComment","commentIdforDelete","commentId","prevComments","filter","length","App","users","setUsers","setPosts","selectedUser","setSelectedUser","setSelectedPostId","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.46fa85bd.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\nimport PropTypes from 'prop-types';\n\nexport const PostsList = ({ posts, onSelect, selectedPostId }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li\n          key={post.id}\n          className=\"PostsList__item\"\n        >\n          <div>\n            <b>\n              {`[User #1]: ${post.userId}`}\n            </b>\n            {post.title}\n          </div>\n          {(selectedPostId === post.id) ? (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => onSelect(0)}\n            >\n              Close\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => onSelect(post.id)}\n            >\n              Open\n            </button>\n          )\n          }\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = url => fetch(`${BASE_URL}${url}`)\n  .then(response => response.json())\n  .then(result => result.data)\n  .catch(() => new Error('Failed download'));\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\nimport { addCommentToServer } from '../../api/comments';\n\nconst { uuid } = require('uuidv4');\n\nexport const NewCommentForm = ({ postId, addCommentLocal }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const addComment = async(event) => {\n    event.preventDefault();\n    const prepearedComment = {\n      postId,\n      name,\n      email,\n      body,\n      id: uuid(),\n    };\n\n    await addCommentToServer(prepearedComment);\n    addCommentLocal(prepearedComment);\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={event => addComment(event)}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={event => setName(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={event => setBody(event.target.value)}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  addCommentLocal: PropTypes.func.isRequired,\n};\n","import { request, BASE_URL } from './api';\n\nexport const getComments = postId => request(`/comments?postId=${postId}`);\n\nexport const deleteComment = commentId => (\n  fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  }));\n\nexport const addCommentToServer = comment => (fetch(`${BASE_URL}/comments`, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify({\n    postId: comment.postId,\n    name: comment.name,\n    email: comment.email,\n    body: comment.body,\n  }),\n}).then(response => response.json()));\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getOnePost } from '../../api/posts';\nimport { getComments, deleteComment } from '../../api/comments';\nimport { Loader } from '../Loader';\n\nexport const PostDetails = ({ postId }) => {\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [showComment, setShowComment] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    getOnePost(postId).then(result => setPost(result));\n    getComments(postId).then((result) => {\n      setComments(result);\n      setLoading(false);\n    });\n  }, [postId]);\n\n  const deleteSelectedComment = async(commentIdforDelete) => {\n    await deleteComment(commentIdforDelete);\n    setComments(prevComments => prevComments\n      .filter(comment => comment.id !== commentIdforDelete));\n  };\n\n  const addNewComment = (comment) => {\n    setComments(prevComments => [...prevComments, comment]);\n  };\n\n  if (loading === true) {\n    return (\n      <Loader />\n    );\n  }\n\n  if (post === null) {\n    return (\n      <p>No post selected</p>\n    );\n  }\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      <section className=\"PostDetails__post\">\n        <p>{post.title}</p>\n      </section>\n      <section className=\"PostDetails__comments\">\n        {showComment ? (\n          <button\n            type=\"button\"\n            className={(comments.length === 0)\n              ? 'button-none' : 'button'}\n            onClick={() => setShowComment(false)}\n          >\n            {`Hide ${comments.length} comments`}\n          </button>\n        ) : (\n          <button\n            type=\"button\"\n            className={(comments.length === 0)\n              ? 'button-none' : 'button'}\n            onClick={() => setShowComment(true)}\n          >\n            {`show ${comments.length} comments`}\n          </button>\n        )}\n        {showComment && (\n        <ul className=\"PostDetails__list\">\n          {comments.map(comment => (\n            <li className=\"PostDetails__list-item\">\n              <button\n                type=\"button\"\n                className=\"PostDetails__remove-button button\"\n                onClick={() => deleteSelectedComment(comment.id)}\n              >\n                X\n              </button>\n              <p>{comment.body}</p>\n            </li>\n          ))}\n        </ul>\n        )}\n      </section>\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={postId}\n            addCommentLocal={addNewComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import { request } from './api';\n\nexport const getUserPosts = userId => request(`/posts?userId=${userId}`);\n\nexport const getPosts = () => request('/posts');\n\nexport const getOnePost = postId => request(`/posts/${postId}`);\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\nimport { getPosts, getUserPosts } from './api/posts';\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [posts, setPosts] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const selectPostId = (postId) => {\n    setSelectedPostId(postId);\n  };\n\n  useEffect(() => {\n    getUsers()\n      .then(result => setUsers(result));\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser === 0) {\n      getPosts().then(result => setPosts(result));\n\n      return;\n    }\n\n    getUserPosts(selectedUser).then(result => setPosts(result));\n  }, [selectedUser]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={event => setSelectedUser(+event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            onSelect={selectPostId}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails\n            postId={selectedPostId}\n          />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\n\nexport const getUsers = () => request('/users');\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}